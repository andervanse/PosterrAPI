// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Posterr.Repository.Postgresql;

#nullable disable

namespace Posterr.Data.Postgresql.Migrations
{
    [DbContext(typeof(PosterrDbContext))]
    partial class PosterrDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Posterr.Domain.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(777)
                        .HasColumnType("character varying(777)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("RepostedPostId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RepostedPostId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("Posterr.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Posterr.Domain.UserFollower", b =>
                {
                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowedId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowerId", "FollowedId");

                    b.HasIndex("FollowedId");

                    b.ToTable("UserFollowers", (string)null);
                });

            modelBuilder.Entity("Posterr.Domain.UserPostsPerDay", b =>
                {
                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("UserId");

                    b.ToTable("UserPostsPerDay", (string)null);
                });

            modelBuilder.Entity("Posterr.Domain.UserSummary", b =>
                {
                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("NumberOfFollowers")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfFollowingUsers")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfPosts")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("UserId");

                    b.ToTable("UserSummaries", (string)null);
                });

            modelBuilder.Entity("Posterr.Domain.Post", b =>
                {
                    b.HasOne("Posterr.Domain.Post", "RepostedPost")
                        .WithMany()
                        .HasForeignKey("RepostedPostId");

                    b.HasOne("Posterr.Domain.User", "Owner")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("RepostedPost");
                });

            modelBuilder.Entity("Posterr.Domain.UserFollower", b =>
                {
                    b.HasOne("Posterr.Domain.User", "Followed")
                        .WithMany("Followers")
                        .HasForeignKey("FollowedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Posterr.Domain.User", "Follower")
                        .WithMany("RemovedFollowers")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Posterr.Domain.UserPostsPerDay", b =>
                {
                    b.HasOne("Posterr.Domain.User", "User")
                        .WithOne("TodayPosts")
                        .HasForeignKey("Posterr.Domain.UserPostsPerDay", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Posterr.Domain.UserSummary", b =>
                {
                    b.HasOne("Posterr.Domain.User", "User")
                        .WithOne("Summary")
                        .HasForeignKey("Posterr.Domain.UserSummary", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Posterr.Domain.User", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("Posts");

                    b.Navigation("RemovedFollowers");

                    b.Navigation("Summary")
                        .IsRequired();

                    b.Navigation("TodayPosts")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
